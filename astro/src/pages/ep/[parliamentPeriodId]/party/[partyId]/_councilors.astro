---
import { type Registry, type RegistryParty } from '@models/registry';
import { formatDate } from '@utils/format-date';

type Props = {
  parliamentPeriod: Registry;
  party: RegistryParty;
};

const { parliamentPeriod, party } = Astro.props as Props;

const persons = parliamentPeriod.persons
  .filter((person) => person.partyId === party.id)
  .map((person) => ({
    ...person,
    party: getPartyName(person.partyId)
  }))
  .toSorted((a, b) => {
    if (a.end && !b.end) {
      return 1;
    }
    if (!a.end && b.end) {
      return -1;
    }
    return a.name.localeCompare(b.name);
  });

function getPartyName(partyId: string) {
  const party = parliamentPeriod.parties.find((party) => party.id === partyId);
  return party ? party.name : '';
}
---

<div
  class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3"
>
  {
    persons.map((person) => (
      <a
        href={`/ep/${parliamentPeriod.id}/person/${person.id}`}
        class="card card-border border-base-300 bg-base-200 hover:bg-base-300"
        class:list={[{ 'opacity-50': person.end }]}
      >
        <div class="card-body p-3">
          <div class="text-sm font-medium">{person.name}</div>
          <div class="text-base-content/70 mt-2 flex items-center text-xs">
            {person.party}
          </div>
          {
            person.end && (
              <div class="text-base-content/70 mt-2 flex items-center text-xs">
                Ratsmitglied bis {formatDate(person.end)}
              </div>
            )
          }
        </div>
      </a>
    ))
  }
</div>
