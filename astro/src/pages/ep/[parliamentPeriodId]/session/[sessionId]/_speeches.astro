---
import Speech from '@components/Speech.astro';
import { type SessionInput } from '@models/SessionInput';
import { type Registry } from '@models/registry';

type Props = {
  parliamentPeriod: Registry;
  sessionInput: SessionInput;
};

const { parliamentPeriod, sessionInput } = Astro.props as Props;

const speeches = sessionInput.speeches.filter(
  (speech) => !speech.isChairPerson && !!speech.transcription
);
---

<div class="alert alert-soft alert-info" role="alert">
  <span class="iconify lucide--info size-5"></span>
  <div class="flex flex-col gap-2">
    <p>
      Die folgenden Redebeiträge wurden automatisiert erstellt und können Fehler
      enthalten. Die Texte dienen nur zur Orientierung und sind nicht als
      offizielle Protokolle zu verstehen. Um Aufzeichnungen der Redebeiträge
      anzuhören, nutzen Sie bitte die Links zum jeweiligen YouTube-Video.
    </p>
    <p>
      Sollten Sie einen Fehler entdecken, können Sie uns diesen gern melden.
      Klicken Sie dazu auf das Flaggen-Symbol unter dem jeweiligen Redebeitrag
      und senden Sie uns eine Nachricht. Wir werden den Fehler umgehend prüfen
      und korrigieren.
    </p>
  </div>
</div>

<ul class="timeline timeline-vertical timeline-compact mt-8">
  {
    speeches.map((speech, index) => (
      <li>
        {index > 0 && <hr />}
        <Speech
          parliamentPeriod={parliamentPeriod}
          session={sessionInput.session}
          speech={speech}
          speechElementId={`speech-${speech.start}`}
          link={`/ep/${parliamentPeriod.id}/session/${sessionInput.session.id}?tab=speeches`}
        />
        {index < speeches.length - 1 && <hr />}
      </li>
    ))
  }
</ul>

<div
  id="speech-link-copied"
  class="alert alert-success fixed bottom-5 right-5 hidden"
>
  <span class="iconify lucide--check"></span>
  <div class="flex flex-col gap-2">
    <p>Link zum Redebeitrag kopiert</p>
  </div>
</div>

<script>
  document.querySelectorAll('.copy-speech-link-btn').forEach((button) => {
    button.addEventListener('click', async (event) => {
      event.preventDefault();
      if (document.activeElement) {
        (document.activeElement as HTMLElement).blur();
      }
      const href = button.getAttribute('href');
      if (!href) {
        return;
      }
      await navigator.clipboard.writeText(
        new URL(href, window.location.origin).toString(),
      );

      const alert = document.getElementById('speech-link-copied');
      if (alert) {
        alert.classList.remove('hidden');
        setTimeout(() => alert.classList.add('hidden'), 3000);
      }
    });
  });
</script>
