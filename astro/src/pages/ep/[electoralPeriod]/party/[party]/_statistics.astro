---
import type { Registry,RegistryParty } from '../../../../../model/registry';
import {
  formatNumber,
  formatPercent,
  getParticipationRate,
  getParticipationRateHistory, getUniformityScore,
  getUniformityScoreHistory, getVotingsSuccessRate,
  getVotingsSuccessRateHistory
} from './_helpers';
import type { SessionInput } from '../../../../../model/SessionInput';
import {
  calcAbstentionRateOfParty,
  calcAbstentionRateHistoryOfParty
} from '../../../../../data-analysis/AbstentionRate';

type Props = {
  electoralPeriod: Registry;
  party: RegistryParty;
  sessionInputs: SessionInput[];
};

const { party, sessionInputs } = Astro.props as Props;

const votingsSuccessRate = getVotingsSuccessRate(party, sessionInputs);
const votingsSuccessRateHistory = getVotingsSuccessRateHistory(party, sessionInputs);
const uniformityScore = getUniformityScore(party, sessionInputs);
const uniformityScoreHistory = getUniformityScoreHistory(party, sessionInputs);
const participationRate = getParticipationRate(party, sessionInputs);
const participationRateHistory = getParticipationRateHistory(party, sessionInputs);
const abstentionRate = calcAbstentionRateOfParty(party, sessionInputs);
const abstentionRateHistory = calcAbstentionRateHistoryOfParty(party, sessionInputs)
  .map(({ date, value }) => ({ x: date, y: value }));

---

<div class="grid grid-cols-1 sm:grid-cols-2 gap-6">

  <div class="divide-y divide-gray-200 overflow-hidden rounded-lg bg-white shadow">
    <div class="px-4 py-3 sm:px-6 text-center">Abstimmungserfolg</div>
    <div class="px-4 py-5 sm:p-6">
      <h2 class="text-base font-semibold text-gray-900 text-center">
        {votingsSuccessRate === null ? 'n/a' : formatPercent(votingsSuccessRate)}
      </h2>
      <p class="text-sm py-2 text-gray-600 text-center">
        Gibt an, wie häufig das Abstimmungsergebnis mit dem Votum der Partei übereinstimmte.
      </p>
      <canvas id="votingsSuccessRateChart"></canvas>
    </div>
  </div>

  <div class="divide-y divide-gray-200 overflow-hidden rounded-lg bg-white shadow">
    <div class="px-4 py-3 sm:px-6 text-center">Geschlossenheit</div>
    <div class="px-4 py-5 sm:p-6">
      <h2 class="text-base font-semibold text-gray-900 text-center">
        {uniformityScore === null ? 'n/a' : formatNumber(uniformityScore, 3)}
      </h2>
      <p class="text-sm py-2 text-gray-600 text-center">
        Ein Wert zwischen 0 und 1 gibt an, wie einheitlich die Parteimitglieder abgestimmt haben. Je größer der Wert ist, desto geschlossener ist das Abstimmungsverhalten der Partei.
      </p>
      <canvas id="uniformityScoreChart"></canvas>
    </div>
  </div>

  <div class="divide-y divide-gray-200 overflow-hidden rounded-lg bg-white shadow">
    <div class="px-4 py-3 sm:px-6 text-center">Abstimmungsteilnahme</div>
    <div class="px-4 py-5 sm:p-6">
      <h2 class="text-base font-semibold text-gray-900 text-center">
        {participationRate === null ? 'n/a' : formatPercent(participationRate)}
      </h2>
      <p class="text-sm py-2 text-gray-600 text-center">
        Gibt an, wie häufig die Parteimitglieder an Abstimmungen teilgenommen haben.
      </p>
      <canvas id="participationRateChart"></canvas>
    </div>
  </div>

  <div class="divide-y divide-gray-200 overflow-hidden rounded-lg bg-white shadow">
    <div class="px-4 py-3 sm:px-6 text-center">Stimmenthaltungen</div>
    <div class="px-4 py-5 sm:p-6">
      <h2 class="text-base font-semibold text-gray-900 text-center">
        {abstentionRate === null ? 'n/a' : formatPercent(abstentionRate)}
      </h2>
      <p class="text-sm py-2 text-gray-600 text-center">
        Gibt an, wie hoch der Anteil der abgegebenen Stimmen ist, die weder dafür noch dagegen waren.
      </p>
      <canvas id="abstentionRateChart"></canvas>
    </div>
  </div>

</div>

<script is:inline src="https://cdn.jsdelivr.net/npm/chart.js@3.9.1/dist/chart.min.js"></script>
<script is:inline src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.bundle.min.js"></script>

<script is:inline define:vars={{ data: votingsSuccessRateHistory }}>

  const votingsSuccessRateChartData = {
    datasets: [{
      data,
      fill: 'origin',
      backgroundColor: 'rgba(219, 234, 254, 1)',
      borderColor: 'rgba(96, 165, 250, 0.6)',
    }]
  };
  const votingsSuccessRateChartOptions = {
    elements: { line: { tension: 0.5 } },
    scales: {
      x: { type: 'time' },
      y: {
        ticks: {
          callback: value => `${(value * 100).toFixed(1)}%`
        }
      }
    },
    plugins: { legend: false }
  };

  const votingsSuccessRateChartCtx = document.getElementById('votingsSuccessRateChart');
  new Chart(
    votingsSuccessRateChartCtx,
    {
      type: 'line',
      data: votingsSuccessRateChartData,
      options: votingsSuccessRateChartOptions
    });

</script>

<script is:inline define:vars={{ uniformityScoreHistory }}>

  const uniformityScoreChartData = {
    datasets: [{
      data: uniformityScoreHistory,
      fill: 'origin',
      backgroundColor: 'rgba(219, 234, 254, 1)',
      borderColor: 'rgba(96, 165, 250, 0.6)',
    }]
  };
  const uniformityScoreChartOptions = {
    elements: { line: { tension: 0.5 } },
    scales: {
      x: { type: 'time' },
      y: {
        ticks: {
          callback: value => value.toFixed(3)
        }
      }
    },
    plugins: { legend: false }
  };

  const uniformityScoreChartCtx = document.getElementById('uniformityScoreChart');
  new Chart(
    uniformityScoreChartCtx,
    {
      type: 'line',
      data: uniformityScoreChartData,
      options: uniformityScoreChartOptions
    });

</script>

<script is:inline define:vars={{ participationRateHistory }}>

  const participationRateChartData = {
    datasets: [{
      data: participationRateHistory,
      fill: 'origin',
      backgroundColor: 'rgba(219, 234, 254, 1)',
      borderColor: 'rgba(96, 165, 250, 0.6)',
    }]
  };
  const participationRateChartOptions = {
    elements: { line: { tension: 0.5 } },
    scales: {
      x: { type: 'time' },
      y: {
        ticks: {
          callback: value => `${(value * 100).toFixed(1)}%`
        }
      }
    },
    plugins: { legend: false }
  };

  const participationRateChartCtx = document.getElementById('participationRateChart');
  new Chart(
    participationRateChartCtx,
    {
      type: 'line',
      data: participationRateChartData,
      options: participationRateChartOptions
    });

</script>

<script is:inline define:vars={{ abstentionRateHistory }}>

  const abstentionRateChartData = {
    datasets: [{
      data: abstentionRateHistory,
      fill: 'origin',
      backgroundColor: 'rgba(219, 234, 254, 1)',
      borderColor: 'rgba(96, 165, 250, 0.6)',
    }]
  };
  const abstentionRateChartOptions = {
    elements: { line: { tension: 0.5 } },
    scales: {
      x: { type: 'time' },
      y: {
        ticks: {
          callback: value => `${(value * 100).toFixed(1)}%`
        }
      }
    },
    plugins: { legend: false }
  };

  const abstentionRateChartCtx = document.getElementById('abstentionRateChart');
  new Chart(
    abstentionRateChartCtx,
    {
      type: 'line',
      data: abstentionRateChartData,
      options: abstentionRateChartOptions
    });

</script>
