---
import BreadcrumbMenuLayout from '../../../../layouts/BreadcrumbMenuLayout.astro';
import type { GetStaticPaths } from 'astro';
import { getCollection } from 'astro:content';
import type { Registry, RegistryFaction } from '../../../../model/registry';
import type { SessionInput } from '../../../../model/SessionInput';
import { VotingSuccess } from '../../../../data-analysis/VotingSuccess';
import { ApplicationsSuccess } from '../../../../data-analysis/ApplicationsSuccess';
import { UniformityScore } from '../../../../data-analysis/UniformityScore';
import { ParticipationRate } from '../../../../data-analysis/ParticipationRate';
import { AbstentionRate } from '../../../../data-analysis/AbstentionRate';
import { SpeakingTime } from '../../../../data-analysis/SpeakingTime';

type Props = {
  electoralPeriod: Registry;
  sessionInputs: SessionInput[];
};

export const getStaticPaths = (async () => {
  const electoralPeriodsCollection = await getCollection('electoralPeriods');
  const sessionConfigsCollection = await getCollection('sessionConfigs');
  const sessionSpeechesCollection = await getCollection('sessionSpeeches');

  const sessionScansCollection = await getCollection('sessionScans');
  return electoralPeriodsCollection.map(electoralPeriod => {
    const sessionConfigs = sessionConfigsCollection
      .filter(sessionConfig => sessionConfig.id.startsWith(`${electoralPeriod.id}/`))
      .map(sessionConfig => ({ sessionId: sessionConfig.id, config: sessionConfig.data }));
    const sessionScans = sessionScansCollection
      .filter(sessionScan => sessionScan.id.startsWith(`${electoralPeriod.id}/`))
      .map(sessionScan => ({ sessionId: sessionScan.id, scan: sessionScan.data }));
    const sessionSpeeches = sessionSpeechesCollection
      .filter(sessionSpeech => sessionSpeech.id.startsWith(`${electoralPeriod.id}/`))
      .map(sessionSpeech => ({ sessionId: sessionSpeech.id, speeches: sessionSpeech.data }));

    const sessionInputs = sessionConfigs.map(sessionConfig => {
      const sessionScan = sessionScans.find(
        sessionScan => sessionScan.sessionId === sessionConfig.sessionId
      );
      const speeches = sessionSpeeches
        .filter(sessionSpeech => sessionSpeech.sessionId === sessionConfig.sessionId)
        .flatMap(sessionSpeech => sessionSpeech.speeches);
      return {
        sessionId: sessionConfig.sessionId,
        config: sessionConfig.config,
        votings: sessionScan?.scan || [],
        speeches
      } as SessionInput;
    });

    return {
      params: { electoralPeriod: electoralPeriod.id },
      props: { electoralPeriod: electoralPeriod.data, sessionInputs }
    };
  });
}) satisfies GetStaticPaths;

const { electoralPeriod, sessionInputs } = Astro.props as Props;

const factions = electoralPeriod.factions
  .map(faction => {
    const applicationsSuccessRate = calcFactionApplicationsSuccessRate(faction, sessionInputs);
    const votingSuccessRate = calcFactionVotingSuccessRate(faction, sessionInputs);
    const uniformityScore = calcFactionUniformityScore(faction, sessionInputs);
    const participationRate = calcFactionParticipationRate(faction, sessionInputs);
    const abstentionRate = calcFactionAbstentionRate(faction, sessionInputs);
    const speakingTime = calcFactionSpeakingTime(faction, sessionInputs);
    return {
      id: faction.id,
      name: faction.name,
      seats: faction.seats,
      applicationsSuccessRate: formatApplicationsSuccessRate(applicationsSuccessRate),
      votingSuccessRate: formatVotingSuccessRate(votingSuccessRate),
      uniformityScore: formatUniformityScore(uniformityScore),
      participationRate: formatParticipationRate(participationRate),
      abstentionRate: formatAbstentionRate(abstentionRate),
      speakingTime: formatSpeakingTime(speakingTime)
    }
  })
  .toSorted((a, b) => b.seats - a.seats);


function calcFactionVotingSuccessRate(faction: RegistryFaction, sessions: SessionInput[]): number {
  const votingSuccess = new VotingSuccess(sessions);
  return votingSuccess.forFaction(faction);
}

function calcFactionApplicationsSuccessRate(faction: RegistryFaction, sessions: SessionInput[]): number {
  const applicationsSuccessRate = new ApplicationsSuccess(sessions);
  return applicationsSuccessRate.forFaction(faction);
}

function calcFactionUniformityScore(faction: RegistryFaction, sessions: SessionInput[]): number {
  const uniformityScore = new UniformityScore(sessions);
  return uniformityScore.forFaction(faction);
}

function calcFactionParticipationRate(faction: RegistryFaction, sessions: SessionInput[]): number {
  const participationRate = new ParticipationRate(sessions);
  return participationRate.forFaction(faction);
}

function calcFactionAbstentionRate(faction: RegistryFaction, sessions: SessionInput[]): number {
  const abstentionRate = new AbstentionRate(sessions);
  return abstentionRate.forFaction(faction);
}

function calcFactionSpeakingTime(faction: RegistryFaction, sessions: SessionInput[]): number {
  const speakingTime = new SpeakingTime(sessions);
  return speakingTime.forFaction(faction);
}

function formatApplicationsSuccessRate(applicationSuccessRate: number): string {
  return (applicationSuccessRate * 100).toLocaleString(
    'de-DE',
    { minimumFractionDigits: 1, maximumFractionDigits: 1 }
  );
}

function formatVotingSuccessRate(votingSuccessRate: number): string {
  return (votingSuccessRate * 100).toLocaleString(
    'de-DE',
    { minimumFractionDigits: 1, maximumFractionDigits: 1 }
  );
}

function formatUniformityScore(uniformityScore: number): string {
  return uniformityScore.toLocaleString(
    'de-DE',
    { minimumFractionDigits: 3, maximumFractionDigits: 3 }
  );
}

function formatParticipationRate(participationRate: number): string {
  return (participationRate * 100).toLocaleString(
    'de-DE',
    { minimumFractionDigits: 1, maximumFractionDigits: 1 }
  );
}

function formatAbstentionRate(abstentionRate: number): string {
  return (abstentionRate * 100).toLocaleString(
    'de-DE',
    { minimumFractionDigits: 1, maximumFractionDigits: 1 }
  );
}

function formatSpeakingTime(speakingTime: number): string {
  const hours = Math.floor(speakingTime / 3600);
  const minutes = Math.floor((speakingTime % 3600) / 60);
  const seconds = speakingTime % 60;
  return `${hours}h ${minutes}m ${seconds}s`;
}

---
<BreadcrumbMenuLayout pageTitle="Fraktionen" electoralPeriod={electoralPeriod}>

  <div class="overflow-x-auto">

    <table class="min-w-full divide-y divide-gray-300">
      <thead>
      <tr>
        <th scope="col" class="whitespace-nowrap py-3.5 text-left text-sm font-semibold text-gray-900">Name</th>
        <th scope="col" class="whitespace-nowrap py-3.5 text-right text-sm font-semibold text-gray-900">Sitze</th>
        <th scope="col" class="whitespace-nowrap py-3.5 text-right text-sm font-semibold text-gray-900">Abstimmungserfolg</th>
        <th scope="col" class="whitespace-nowrap py-3.5 text-right text-sm font-semibold text-gray-900">Geschlossenheit</th>
        <th scope="col" class="whitespace-nowrap py-3.5 text-right text-sm font-semibold text-gray-900">Abstimmungsteilnahme</th>
        <th scope="col" class="whitespace-nowrap py-3.5 text-right text-sm font-semibold text-gray-900">Stimmenthaltungen</th>
        <th scope="col" class="whitespace-nowrap py-3.5 text-right text-sm font-semibold text-gray-900">Erfolgreiche Antr√§ge</th>
        <th scope="col" class="whitespace-nowrap py-3.5 text-right text-sm font-semibold text-gray-900">Redezeit</th>
      </tr>
      </thead>
      <tbody class="divide-y divide-gray-200">
      {factions.map(faction =>
        <tr>
          <td class="whitespace-nowrap py-2 pr-3 text-sm">
            <a
              class="text-blue-600 hover:underline"
              href={`/ep/${electoralPeriod.id}/faction/${faction.id}`}
            >{faction.name}</a>
          </td>
          <td class="whitespace-nowrap py-2 text-right text-sm text-gray-900">{faction.seats}</td>
          <td class="whitespace-nowrap py-2 text-right text-sm text-gray-900">{faction.votingSuccessRate}%</td>
          <td class="whitespace-nowrap py-2 text-right text-sm text-gray-900">{faction.uniformityScore}</td>
          <td class="whitespace-nowrap py-2 text-right text-sm text-gray-900">{faction.participationRate}%</td>
          <td class="whitespace-nowrap py-2 text-right text-sm text-gray-900">{faction.abstentionRate}%</td>
          <td class="whitespace-nowrap py-2 text-right text-sm text-gray-900">{faction.applicationsSuccessRate}%</td>
          <td class="whitespace-nowrap py-2 text-right text-sm text-gray-900">{faction.speakingTime}</td>
        </tr>
      )}
      </tbody>
    </table>

  </div>

</BreadcrumbMenuLayout>
