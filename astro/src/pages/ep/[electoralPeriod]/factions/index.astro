---
import BreadcrumbMenuLayout from '../../../../layouts/BreadcrumbMenuLayout.astro';
import type { GetStaticPaths } from 'astro';
import { getCollection } from 'astro:content';
import type { Registry } from '../../../../model/registry';
import type { SessionInput } from '../../../../model/SessionInput';
import {
  formatAbstentionRate,
  formatApplicationsSuccessRate,
  formatParticipationRate, formatSpeakingTime,
  formatUniformityScore,
  formatVotingSuccessRate
} from './_helpers';
import { calcAbstentionRateOfFaction } from '../../../../data-analysis/AbstentionRate';
import { calcApplicationsSuccessRateOfFaction } from '../../../../data-analysis/ApplicationsSuccess';
import { calcParticipationRateOfFaction } from '../../../../data-analysis/ParticipationRate';
import { calcSpeakingTimeOfFaction } from '../../../../data-analysis/SpeakingTime';
import { calcUniformityScoreOfFaction } from '../../../../data-analysis/UniformityScore';
import { calcVotingSuccessRateOfFaction } from '../../../../data-analysis/VotingSuccess';

type Props = {
  electoralPeriod: Registry;
  sessionInputs: SessionInput[];
};

export const getStaticPaths = (async () => {
  const electoralPeriodsCollection = await getCollection('electoralPeriods');
  const sessionConfigsCollection = await getCollection('sessionConfigs');
  const sessionSpeechesCollection = await getCollection('sessionSpeeches');

  const sessionScansCollection = await getCollection('sessionScans');
  return electoralPeriodsCollection.map(electoralPeriod => {
    const sessionConfigs = sessionConfigsCollection
      .filter(sessionConfig => sessionConfig.id.startsWith(`${electoralPeriod.id}/`))
      .map(sessionConfig => ({ sessionId: sessionConfig.id, config: sessionConfig.data }));
    const sessionScans = sessionScansCollection
      .filter(sessionScan => sessionScan.id.startsWith(`${electoralPeriod.id}/`))
      .map(sessionScan => ({ sessionId: sessionScan.id, scan: sessionScan.data }));
    const sessionSpeeches = sessionSpeechesCollection
      .filter(sessionSpeech => sessionSpeech.id.startsWith(`${electoralPeriod.id}/`))
      .map(sessionSpeech => ({ sessionId: sessionSpeech.id, speeches: sessionSpeech.data }));

    const sessionInputs = sessionConfigs.map(sessionConfig => {
      const sessionScan = sessionScans.find(
        sessionScan => sessionScan.sessionId === sessionConfig.sessionId
      );
      const speeches = sessionSpeeches
        .filter(sessionSpeech => sessionSpeech.sessionId === sessionConfig.sessionId)
        .flatMap(sessionSpeech => sessionSpeech.speeches);
      return {
        sessionId: sessionConfig.sessionId,
        config: sessionConfig.config,
        votings: sessionScan?.scan || [],
        speeches
      } as SessionInput;
    });

    return {
      params: { electoralPeriod: electoralPeriod.id },
      props: { electoralPeriod: electoralPeriod.data, sessionInputs }
    };
  });
}) satisfies GetStaticPaths;

const { electoralPeriod, sessionInputs } = Astro.props as Props;

const factions = electoralPeriod.factions
  .map(faction => {
    const applicationsSuccessRate = calcApplicationsSuccessRateOfFaction(faction, sessionInputs);
    const votingSuccessRate = calcVotingSuccessRateOfFaction(faction, sessionInputs);
    const uniformityScore = calcUniformityScoreOfFaction(faction, sessionInputs);
    const participationRate = calcParticipationRateOfFaction(faction, sessionInputs);
    const abstentionRate = calcAbstentionRateOfFaction(faction, sessionInputs);
    const speakingTime = calcSpeakingTimeOfFaction(faction, sessionInputs);
    return {
      id: faction.id,
      name: faction.name,
      seats: faction.seats,
      applicationsSuccessRate,
      votingSuccessRate,
      uniformityScore,
      participationRate,
      abstentionRate,
      speakingTime
    }
  })
  .toSorted((a, b) => b.seats - a.seats);

---
<BreadcrumbMenuLayout pageTitle="Fraktionen" electoralPeriod={electoralPeriod}>

  <h1 class="text-3xl font-bold text-gray-900 sm:tracking-tight">Fraktionen</h1>

  <div class="overflow-x-auto">

    <table class="min-w-full divide-y divide-gray-300">
      <thead>
      <tr>
        <th scope="col" class="whitespace-nowrap py-3.5 text-left text-sm font-semibold text-gray-900">Name</th>
        <th scope="col" class="whitespace-nowrap py-3.5 text-right text-sm font-semibold text-gray-900">Sitze</th>
        <th scope="col" class="whitespace-nowrap py-3.5 text-right text-sm font-semibold text-gray-900">Abstimmungserfolg</th>
        <th scope="col" class="whitespace-nowrap py-3.5 text-right text-sm font-semibold text-gray-900">Geschlossenheit</th>
        <th scope="col" class="whitespace-nowrap py-3.5 text-right text-sm font-semibold text-gray-900">Abstimmungsteilnahme</th>
        <th scope="col" class="whitespace-nowrap py-3.5 text-right text-sm font-semibold text-gray-900">Stimmenthaltungen</th>
        <th scope="col" class="whitespace-nowrap py-3.5 text-right text-sm font-semibold text-gray-900">Erfolgreiche Antr√§ge</th>
        <th scope="col" class="whitespace-nowrap py-3.5 text-right text-sm font-semibold text-gray-900">Redezeit</th>
      </tr>
      </thead>
      <tbody class="divide-y divide-gray-200">
      {factions.map(faction =>
        <tr>
          <td class="whitespace-nowrap py-2 pr-3 text-sm">
            <a
              class="text-blue-600 hover:underline"
              href={`/ep/${electoralPeriod.id}/faction/${faction.id}`}
            >{faction.name}</a>
          </td>
          <td class="whitespace-nowrap py-2 text-right text-sm text-gray-900">{faction.seats}</td>
          <td class="whitespace-nowrap py-2 text-right text-sm text-gray-900">
            {faction.votingSuccessRate === null ? 'n/a' : formatVotingSuccessRate(faction.votingSuccessRate)}%
          </td>
          <td class="whitespace-nowrap py-2 text-right text-sm text-gray-900">
            {faction.uniformityScore === null ? 'n/a' : formatUniformityScore(faction.uniformityScore)}
          </td>
          <td class="whitespace-nowrap py-2 text-right text-sm text-gray-900">
            {faction.participationRate === null ? 'n/a' : formatParticipationRate(faction.participationRate)}%
          </td>
          <td class="whitespace-nowrap py-2 text-right text-sm text-gray-900">
            {faction.abstentionRate === null ? 'n/a' : formatAbstentionRate(faction.abstentionRate)}%
          </td>
          <td class="whitespace-nowrap py-2 text-right text-sm text-gray-900">
            {faction.applicationsSuccessRate === null ? 'n/a' : formatApplicationsSuccessRate(faction.applicationsSuccessRate)}%
          </td>
          <td class="whitespace-nowrap py-2 text-right text-sm text-gray-900">
            {formatSpeakingTime(faction.speakingTime)}
          </td>
        </tr>
      )}
      </tbody>
    </table>

  </div>

</BreadcrumbMenuLayout>
