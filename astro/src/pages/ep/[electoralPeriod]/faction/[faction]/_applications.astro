---
import type { Registry, RegistryFaction } from '../../../../../model/registry';
import type { SessionInput } from '../../../../../model/SessionInput';
import { ApplicationResult, formatVotingDate, getApplicationResult, getVotingId, getVotingResult } from './_helpers';

type Props = {
  electoralPeriod: Registry;
  faction: RegistryFaction;
  sessionInputs: SessionInput[];
};

const { electoralPeriod, faction, sessionInputs } = Astro.props as Props;

const factionApplicationsVotings = sessionInputs
  .flatMap(sessionInput => sessionInput.votings.map(voting => ({
    voting,
    sessionId: sessionInput.sessionId,
    sessionDate: sessionInput.config.date
  })))
  .filter(voting => !!voting.voting.votingSubject.applicationId)
  .filter(voting => voting.voting.votingSubject.authors.includes(faction.name));

const applicationsMap = factionApplicationsVotings.reduce(
  (acc, curr) => {
    const key = `${curr.voting.votingSubject.applicationId}-${curr.voting.votingSubject.type}`;
    if (!acc[key]) {
      acc[key] = [];
    }
    acc[key].push(curr);
    return acc;
  }, {} as Record<string, typeof factionApplicationsVotings>);
const applications = Object
  .values(applicationsMap)
  .map(applicationVotings => {
    const applicationVoting = applicationVotings[0];
    const applicationId = applicationVoting.voting.votingSubject.applicationId;
    const applicationType = applicationVoting.voting.votingSubject.type;
    const applicationTitle = applicationVoting.voting.votingSubject.title;
    const paperId = 1; // TODO: applicationVoting.voting.votingSubject.paperId;
    const sessionId = applicationVoting.sessionId;
    const sessionDate = applicationVoting.sessionDate;
    const votings = applicationVotings.map(
      applicationVoting => ({
        votingId: +applicationVoting.voting.votingFilename.substring(11, 14),
        votingResult: getVotingResult(applicationVoting.voting.votes)
      })
    );
    return {
      applicationId,
      type: applicationType,
      title: applicationTitle,
      sessionId,
      sessionDate,
      paperId,
      votings
    };
  })
  .toSorted((a, b) => b.sessionDate.localeCompare(a.sessionDate))
  .map(application => {
    return {
      sessionId: application.sessionId,
      votingDate: formatVotingDate(application.sessionDate),
      votingId: getVotingId(application.votings),
      type: application.type,
      applicationId: application.applicationId,
      title: application.title,
      result: getApplicationResult(application.votings),
      paperId: application.paperId,
    }
  });

---

<div class="overflow-x-auto">

  <table class="min-w-full divide-y divide-gray-300">
    <thead>
    <tr>
      <th scope="col" class="whitespace-nowrap py-3.5 pr-3 text-left text-sm font-semibold text-gray-900">Abgestimmt am</th>
      <th scope="col" class="whitespace-nowrap py-3.5 pr-3 text-left text-sm font-semibold text-gray-900">Antrag</th>
      <th scope="col" class="whitespace-nowrap py-3.5 pr-3 text-left text-sm font-semibold text-gray-900">Titel</th>
      <th scope="col" class="whitespace-nowrap py-3.5 pr-3 text-center text-sm font-semibold text-gray-900">Ergebnis</th>
    </tr>
    </thead>
    <tbody class="divide-y divide-gray-200">
    {applications.map(application =>
      <tr>
        <td class="whitespace-nowrap py-2 pr-3 text-sm text-gray-900">{application.votingDate}</td>
        <td class="py-2 pr-3 text-sm text-gray-900 flex flex-col">
          <span>{application.type}</span>
          {application.paperId &&
            <span>
              <a
                href={`/paper?paperId=${application.paperId}`}
                class="text-indigo-600 hover:text-indigo-900"
              >{application.applicationId}</a>
            </span>
          }
        </td>
        <td class="py-2 pr-3 text-sm text-gray-900">
          <a
            href={`/ep/${electoralPeriod.id}/session/${application.sessionId}/voting/${application.votingId}`}
            class="text-indigo-600 hover:text-indigo-900"
          >{application.title}</a>
        </td>
        <td class="whitespace-nowrap py-2 text-center text-sm text-gray-900">
          {application.result === ApplicationResult.ACCEPTED &&
            <span class="rounded-md bg-green-200 px-1.5 py-0.5 text-xs font-medium text-green-800 ring-1 ring-inset ring-green-800/20">angenommen</span>
          }
          {application.result === ApplicationResult.PARTIALLY_ACCEPTED &&
            <span class="rounded-md bg-orange-200 px-1.5 py-0.5 text-xs font-medium text-orange-800 ring-1 ring-inset ring-orange-800/20">teilweise</span>
          }
          {application.result === ApplicationResult.REJECTED &&
            <span class="rounded-md bg-red-200 px-1.5 py-0.5 text-xs font-medium text-red-800 ring-1 ring-inset ring-red-800/20">abgelehnt</span>
          }
        </td>
      </tr>
    )}
    </tbody>
  </table>

</div>
