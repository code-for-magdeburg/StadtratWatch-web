---
import type { GetStaticPaths } from 'astro';
import { getCollection } from 'astro:content';
import type { SessionInput } from '../../../../../model/SessionInput';
import type { Registry } from '../../../../../model/registry';
import BreadcrumbMenuLayout from '../../../../../layouts/BreadcrumbMenuLayout.astro';

type Props = {
  electoralPeriod: Registry;
  sessionInputs: SessionInput[];
};

export const getStaticPaths = (async () => {

  const electoralPeriodsCollection = await getCollection('electoralPeriods');
  const sessionConfigsCollection = await getCollection('sessionConfigs');
  const sessionSpeechesCollection = await getCollection('sessionSpeeches');
  const sessionScansCollection = await getCollection('sessionScans');

  return electoralPeriodsCollection.flatMap(electoralPeriod =>
    electoralPeriod.data.factions.map(faction => {

      const sessionConfigs = sessionConfigsCollection
        .filter(sessionConfig => sessionConfig.id.startsWith(`${electoralPeriod.id}/`))
        .map(sessionConfig => ({ sessionId: sessionConfig.id, config: sessionConfig.data }));
      const sessionScans = sessionScansCollection
        .filter(sessionScan => sessionScan.id.startsWith(`${electoralPeriod.id}/`))
        .map(sessionScan => ({ sessionId: sessionScan.id, scan: sessionScan.data }));
      const sessionSpeeches = sessionSpeechesCollection
        .filter(sessionSpeech => sessionSpeech.id.startsWith(`${electoralPeriod.id}/`))
        .map(sessionSpeech => ({ sessionId: sessionSpeech.id, speeches: sessionSpeech.data }));

      const sessionInputs = sessionConfigs.map(sessionConfig => {
        const sessionScan = sessionScans.find(
          sessionScan => sessionScan.sessionId === sessionConfig.sessionId
        );
        const speeches = sessionSpeeches
          .filter(sessionSpeech => sessionSpeech.sessionId === sessionConfig.sessionId)
          .flatMap(sessionSpeech => sessionSpeech.speeches);
        return {
          sessionId: sessionConfig.sessionId,
          config: sessionConfig.config,
          votings: sessionScan?.scan || [],
          speeches
        } as SessionInput;
      });

      return {
        params: { electoralPeriod: electoralPeriod.id, faction: faction.id },
        props: { electoralPeriod: electoralPeriod.data, sessionInputs }
      };

    })
  );

}) satisfies GetStaticPaths;

const { electoralPeriod, sessionInputs } = Astro.props as Props;
const faction = electoralPeriod.factions.find(faction => faction.id === Astro.params.faction)!;

---
<BreadcrumbMenuLayout
  electoralPeriod={electoralPeriod}
  breadcrumbMenuItems={[{ title: 'Fraktionen', url: `/ep/${electoralPeriod.id}/factions` }]}
  pageTitle={faction.name}
>
  ...
</BreadcrumbMenuLayout>
