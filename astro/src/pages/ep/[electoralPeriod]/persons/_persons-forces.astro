---
import type { Registry } from '../../../../model/registry';
import type { SessionInput } from '../../../../model/SessionInput';
import { calcPersonsForces } from '../../../../data-analysis/PersonsForces';

const config = {
  valueThreshold: .65,
  distance: 200,
  fillColors: [
    ['magdeburg-7 - CDU', '#16B9DE'],
    ['magdeburg-7 - SPD', '#F33F2F'],
    ['magdeburg-7 - DIE LINKE', '#C535E5'],
    ['magdeburg-7 - Gartenpartei/Tierschutzallianz', '#107012'],
    ['magdeburg-7 - AfD', '#0845C5'],
    ['magdeburg-7 - FDP/Tierschutzpartei', '#E7D251'],
    ['magdeburg-7 - GRÜNE/future!', '#3EAD3E'],
    ['magdeburg-7 - Oberbürgermeisterin', '#A1A2A1'],

    ['magdeburg-8 - CDU/FDP', '#16B9DE'],
    ['magdeburg-8 - SPD/Tierschutzallianz/Volt', '#F33F2F'],
    ['magdeburg-8 - DIE LINKE', '#C535E5'],
    ['magdeburg-8 - Gartenpartei', '#107012'],
    ['magdeburg-8 - AfD', '#0845C5'],
    ['magdeburg-8 - Tierschutzpartei', '#E7D251'],
    ['magdeburg-8 - GRÜNE/future!', '#3EAD3E'],
    ['magdeburg-8 - Oberbürgermeisterin', '#A1A2A1']
  ]
}

type Props = {
  electoralPeriod: Registry;
  sessions: SessionInput[];
};

const { electoralPeriod, sessions } = Astro.props as Props;

const personsForces = calcPersonsForces(electoralPeriod, sessions);

---

<script is:inline src="https://cdn.jsdelivr.net/npm/d3@7"></script>

<style is:inline>
  .person-tooltip {
    position: absolute;
    text-align: center;
    padding: 5px;
    border: 1px solid black;
    border-radius: 5px;
    pointer-events: none; /* keep the mouseover when over the tooltip */
  }
</style>

<script is:inline define:vars={{ electoralPeriod: electoralPeriod.id, data: personsForces, config }}>

  document.addEventListener('alpine:init', () => {

    const graphContainer = document.getElementById('graph-container');

    const nodes = data.nodes.map(d => ({...d}));
    const links = data.links
      .filter(d => d.value > config.valueThreshold)
      .map(d => ({...d}));

    const fillColorsMap = new Map(config.fillColors);

    const svg = d3.select(graphContainer).append('svg');

    const tooltip = d3
      .select(graphContainer)
      .append('div')
      .classed('person-tooltip bg-gray-300', true)
      .style('opacity', 0);

    Alpine.data('graph', () => ({
      showGraph() {
        setTimeout(() => this.drawGraph(graphContainer.clientWidth, graphContainer.clientHeight), 100);
      },
      drawGraph(width, height) {

        svg
          .attr('width', width)
          .attr('height', height)
          .attr('viewBox', [0, 0, width, height])
          .classed('w-full h-auto bg-gray-200', true)
          .call(d3.zoom().on('zoom', event => d3.select('svg g').attr('transform', event.transform)));

        svg.selectAll('g').remove();
        const node = svg
          .append('g')
          .attr('stroke', "#aaa")
          .attr('stroke-width', 1)
          .selectAll('circle')
          .data(nodes)
          .join('circle')
          .attr('r', 5)
          .attr('fill', d => fillColorsMap.get(`${electoralPeriod} - ${d.faction}`))
          .on('mouseover', mouseOver)
          .on('mouseleave', mouseLeave)
          .call(d3.drag()
            .on('start', dragstarted)
            .on('drag', dragged)
            .on('end', dragended));

        function ticked() {
          node
            .attr('cx', d => d.x)
            .attr('cy', d => d.y);
        }

        const simulation = d3
          .forceSimulation(nodes)
          .force('charge', d3.forceManyBody())
          .force('link', d3.forceLink(links)
            .id(d => d.id)
            .distance(l => config.distance * (1 - l.value)))
          .force('center', d3.forceCenter(width / 3, height / 3))
          .force('collision', d3.forceCollide(5))
          .on('tick', ticked);

        function dragstarted(event) {
          if (!event.active) simulation.alphaTarget(0.3).restart();
          event.subject.fx = event.subject.x;
          event.subject.fy = event.subject.y;
        }

        function dragged(event) {
          event.subject.fx = event.x;
          event.subject.fy = event.y;
        }

        function dragended(event) {
          if (!event.active) simulation.alphaTarget(0);
          event.subject.fx = null;
          event.subject.fy = null;
        }

        function mouseOver(event, node) {
          tooltip
            .transition()
            .duration(300)
            .style('opacity', 1);
          tooltip
            .html(`
<span class="font-bold text-gray-900">
    ${node.name}
</span>
<br>
<span class="text-gray-600">
    ${node.faction}
</span>`)
            .style('left', `${event.pageX - tooltip.node().offsetWidth - 5}px`)
            .style('top', `${event.pageY - tooltip.node().offsetHeight}px`);
        }

        function mouseLeave() {
          tooltip
            .transition()
            .duration(200)
            .style('opacity', 0);
        }

      }
    }))

  });

</script>

<div
  class="space-y-10 py-5 md:py-5"
  x-data="graph"
  x-init="$watch('currentTab', value => currentTab === 'persons-graph' && showGraph())"
  @resize.window="showGraph()"
>

  <div class="rounded-md bg-blue-100 p-4 border border-blue-400/20">
    <div class="flex">
      <div class="shrink-0">
        <svg class="size-5 text-blue-400" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" data-slot="icon">
          <path fill-rule="evenodd" d="M18 10a8 8 0 1 1-16 0 8 8 0 0 1 16 0Zm-7-4a1 1 0 1 1-2 0 1 1 0 0 1 2 0ZM9 9a.75.75 0 0 0 0 1.5h.253a.25.25 0 0 1 .244.304l-.459 2.066A1.75 1.75 0 0 0 10.747 15H11a.75.75 0 0 0 0-1.5h-.253a.25.25 0 0 1-.244-.304l.459-2.066A1.75 1.75 0 0 0 9.253 9H9Z" clip-rule="evenodd" />
        </svg>
      </div>
      <div class="ml-3 text-sm text-blue-700">
        <p>Jedes Kreissymbol repräsentiert ein Ratsmitglied. Je ähnlicher das Abstimmungsverhalten zweier Ratsmitglieder ist, desto näher liegen ihre Kreise beieinander.</p>
      </div>
    </div>
  </div>

  <div id="graph-container" style="min-height: 500px;"></div>

</div>
