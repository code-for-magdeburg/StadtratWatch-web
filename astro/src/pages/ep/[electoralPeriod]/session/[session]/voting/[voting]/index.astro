---
import BreadcrumbMenuLayout from '../../../../../../../layouts/BreadcrumbMenuLayout.astro';
import type { InferGetStaticPropsType, GetStaticPaths } from 'astro';
import { getCollection } from 'astro:content';
import { convertVideoTimestampToSeconds } from './_helpers';

type Props = InferGetStaticPropsType<typeof getStaticPaths>;

export const getStaticPaths = (async () => {

  const electoralPeriods = await getCollection('electoralPeriods');
  const sessionConfigs = await getCollection('sessionConfigs');
  const sessionScans = await getCollection('sessionScans');

  return electoralPeriods
    .flatMap(electoralPeriod =>
      electoralPeriod.data.sessions.map(session => {
        const config = sessionConfigs.find(config => config.id === `${electoralPeriod.id}/${session.id}`)!.data;
        const votings = sessionScans.find(scan => scan.id === `${electoralPeriod.id}/${session.id}`)!.data;
        return votings.map((voting, index) => {
          const votingId = +voting.votingFilename.substring(11, 14);
          return {
            params: { electoralPeriod: electoralPeriod.id, session: session.id, voting: votingId },
            props: { electoralPeriod: electoralPeriod.data, config, session, voting, votingId }
          };
        });
      })
    )
    .flat();

}) satisfies GetStaticPaths;

const {
  electoralPeriod,
  config,
  session,
  voting
} = Astro.props as Props;

const votesWithFaction = voting.votes.map(vote => {
  const person = config.names.find(name => name.name === vote.name);
  if (!person) {
    console.error(`Person ${vote.name} not found in config`);
  }
  const personId = electoralPeriod.persons.find(person => person.name === vote.name)?.id;
  return {
    ...vote,
    personId,
    faction: person?.faction!,
  };
});

const votesGroupedByFaction = votesWithFaction.reduce((acc, vote) => {
  if (!acc[vote.faction]) {
    acc[vote.faction] = [];
  }
  acc[vote.faction].push(vote);
  return acc;
}, {} as Record<string, typeof votesWithFaction>);
const groupsSortedByVotes = Object
  .entries(votesGroupedByFaction)
  .sort((a, b) => b[1].length - a[1].length);

const formattedDate = new Date(session.date).toLocaleString(
  'de-DE',
  { day: '2-digit', month: '2-digit', year: 'numeric' }
);

const youtubeUrl = `${config.youtubeUrl}?t=${convertVideoTimestampToSeconds(voting.videoTimestamp)}s`;

const votedFor = voting.votes.filter(vote => vote.vote === 'J').length;
const votedAgainst = voting.votes.filter(vote => vote.vote === 'N').length;
const abstentions = voting.votes.filter(vote => vote.vote === 'E').length;

---
<BreadcrumbMenuLayout
  electoralPeriod={electoralPeriod}
  breadcrumbMenuItems={[
    { title: 'Sitzungen', url: `/ep/${electoralPeriod.id}/sessions` },
    { title: formattedDate, url: `/ep/${electoralPeriod.id}/session/${session.id}` }
  ]}
  pageTitle={`${voting.votingSubject.type || ''} ${voting.votingSubject.applicationId}`}
>

  <div class="lg:flex lg:items-center lg:justify-between">
    <h2 class="mt-2 text-2xl/7 font-bold text-gray-900 sm:text-3xl sm:tracking-tight">Abstimmung <small class="ms-2 font-semibold text-gray-500">TOP {voting.votingSubject.agendaItem}</small></h2>
    <div class="flex lg:ml-4 lg:mt-0 items-center">
      <div class="text-sm text-gray-500">
        <a href={youtubeUrl} target="_blank" class="hover:underline">In YouTube öffnen</a>
      </div>
    </div>
  </div>

  <div class="py-5 md:py-5 space-y-5">

    <div class="divide-y sm:divide-y-0 divide-gray-200 overflow-hidden rounded-lg bg-gray-200 shadow sm:grid md:grid-cols-2 lg:grid-cols-3 sm:gap-px">
      <div class="bg-white px-4 py-5 sm:px-6 lg:col-span-2">

        <p class="mt-1 text-xl font-semibold text-gray-900">
          "{voting.votingSubject.title}"
        </p>

        <div class="mt-5 flex flex-wrap gap-1">
          {voting.votingSubject.authors.map(author =>
            <span class="rounded-md bg-gray-200 px-1.5 py-0.5 text-sm font-medium text-gray-600 ring-1 ring-inset ring-gray-500/20">
              {author}
            </span>
          )}
        </div>

      </div>
      <div class="bg-white px-4 py-5 sm:px-6">

        <div class=" grid grid-cols-3 grid-flow-row gap-3 text-center items-center">
          <div class="bg-green-400 p-3 rounded-lg flex flex-col">
            <span class="text-gray-700">Dafür</span>
            <span class="font-semibold text-xl">{votedFor}</span>
          </div>
          <div class="bg-red-400 p-3 rounded-lg flex flex-col">
            <span class="text-gray-700">Dagegen</span>
            <span class="font-semibold text-xl">{votedAgainst}</span>
          </div>
          <div class="bg-yellow-400 p-3 rounded-lg flex flex-col">
            <span class="text-gray-700">Enthaltung</span>
            <span class="font-semibold text-xl">{abstentions}</span>
          </div>
          {votedFor > votedAgainst
            ? <div class="col-span-3 bg-green-400 p-3 rounded-lg text-xl">Angenommen</div>
            : <div class="col-span-3 bg-red-400 p-3 rounded-lg text-xl">Abgelehnt</div>
          }
        </div>

      </div>
    </div>

    <ul role="list" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
      {groupsSortedByVotes.map(([faction, votes]) => (
        <li class="col-span-1 flex flex-col divide-y divide-gray-200 rounded-lg bg-white text-center shadow self-start">
          <div class="divide-y divide-gray-200 overflow-hidden rounded-lg bg-white shadow">

            <div class="px-4 py-5 sm:px-6">
              <h3 class="text-base font-semibold text-gray-900 text-start">{faction}</h3>
            </div>

            <div role="list" class="divide-y divide-gray-100">
              {votes.map(vote => (
                <a
                  href={`/ep/${electoralPeriod.id}/person/${vote.personId}`}
                  class="flex justify-between gap-x-2 px-4 py-2 items-center"
                >
                  <div class="truncate text-sm">{vote.name}</div>
                  <div
                    class="rounded-full p-1"
                    class:list={[
                      {'bg-gray-500/30': vote.vote === 'O' }, { 'text-gray-500': vote.vote === 'O' },
                      {'bg-green-500/30': vote.vote === 'J' }, { 'text-green-500': vote.vote === 'J' },
                      {'bg-red-500/30': vote.vote === 'N' }, { 'text-red-500': vote.vote === 'N' },
                      {'bg-yellow-500/30': vote.vote === 'E' }, { 'text-yellow-500': vote.vote === 'E' }
                    ]}
                  >
                    <div class="size-2 rounded-full bg-current"></div>
                  </div>
                </a>
              ))}
            </div>

          </div>

        </li>
      ))}
    </ul>

  </div>

</BreadcrumbMenuLayout>
