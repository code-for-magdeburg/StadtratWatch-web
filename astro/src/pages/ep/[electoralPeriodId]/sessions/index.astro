---
import PageLayout from '@layouts/PageLayout.astro';
import {
  type ElectoralPeriodWithSessionsProps,
  getElectoralPeriodWithSessionsPaths,
} from '../_helpers';
import { type BreadcrumbItem } from '@components/BreadcrumbMenu.astro';
import type { MonthEntry, SessionEntry, TimelineEntry } from './_model';
import { formatDate } from '@utils/format-date';

export const getStaticPaths = getElectoralPeriodWithSessionsPaths;

const { electoralPeriodId } = Astro.params;
const { electoralPeriod, sessionInputs } =
  Astro.props as ElectoralPeriodWithSessionsProps;

const groupedByMonthMap = Map.groupBy(sessionInputs, (sessionInput) => {
  const date = new Date(sessionInput.config.date);
  const month = `${date.getMonth() + 1}`.padStart(2, '0');
  const year = date.getFullYear();
  return `${year}-${month}`;
});
const groupedByMonth = Array.from(groupedByMonthMap)
  .map(([key, value]) => {
    const year = parseInt(key.split('-')[0], 10);
    const month = parseInt(key.split('-')[1], 10);
    const label = new Date(key + '-01').toLocaleString('de-DE', {
      month: 'long',
      year: 'numeric',
    });
    return {
      month,
      year,
      label,
      sessions: value.map((sessionInput) => ({
        sessionId: sessionInput.sessionId,
        date: sessionInput.config.date,
        dateDisplay: formatDate(sessionInput.config.date),
        title: sessionInput.config.title,
      })),
    };
  })
  .toSorted((a, b) =>
    a.year !== b.year ? b.year - a.year : b.month - a.month,
  );


const timelineEntries = groupedByMonth
  .map<TimelineEntry[]>((group) => {
    const monthEntry = {
      type: 'month',
      month: group.month,
      year: group.year,
      label: group.label,
    } as TimelineEntry;
    const sessionEntries = group.sessions
      .toSorted(
        (a, b) => new Date(a.date).getTime() - new Date(b.date).getTime(),
      )
      .map<TimelineEntry>((session) => {
        return {
          type: 'session',
          sessionId: session.sessionId,
          date: session.date,
          dateDisplay: formatDate(session.date),
          title: session.title,
        };
      });

    return [monthEntry, ...sessionEntries];
  })
  .flat();

const breadcrumbItems: BreadcrumbItem[] = [
  {
    name: electoralPeriod.name,
    href: `/ep/${electoralPeriodId}`,
  },
  {
    name: 'Sitzungen',
    href: null,
  },
];
---

<PageLayout
  pageTitle="Sitzungen"
  electoralPeriod={electoralPeriod}
  breadcrumbItems={breadcrumbItems}
>
  <ul class="timeline timeline-vertical">
    {
      timelineEntries.map((entry, index) =>
        entry.type === 'month' ? (
          <li>
            {index !== 0 && <hr />}
            <div class="timeline-start">{(entry as MonthEntry).label}</div>
            <div class="timeline-middle">
              <div class="bg-base-200 grid place-items-center rounded-full border border-base-300 p-1">
                <span class="iconify lucide--calendar-1" />
              </div>
            </div>
            {index < timelineEntries.length - 1 && <hr />}
          </li>
        ) : (
          <li>
            {index !== 0 && <hr />}
            <div class="timeline-middle">
              <div class="bg-base-200 grid place-items-center rounded-full border border-base-300 p-1" />
            </div>
            <a
              href={`/ep/${electoralPeriodId}/session/${(entry as SessionEntry).sessionId}`}
              class="timeline-end timeline-box ms-3 hover:bg-base-200 hover:cursor-pointer space-y-2"
            >
              <div class="text-base-content/70">
                {(entry as SessionEntry).dateDisplay}
              </div>
              {(entry as SessionEntry).title && (
                <div class="text-base">{(entry as SessionEntry).title}</div>
              )}
            </a>
            {index < timelineEntries.length - 1 && <hr />}
          </li>
        ),
      )
    }
  </ul>
</PageLayout>
