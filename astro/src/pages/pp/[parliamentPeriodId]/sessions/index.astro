---
import PageLayout from '@layouts/PageLayout.astro';
import {
  type ParliamentPeriodWithSessionsProps,
  getParliamentPeriodWithSessionsPaths,
} from '../_helpers';
import { type BreadcrumbItem } from '@components/BreadcrumbMenu.astro';
import type { MonthEntry, SessionEntry, TimelineEntry } from './_model';
import { formatDate } from '@utils/format-date';

export const getStaticPaths = getParliamentPeriodWithSessionsPaths;

const { parliamentPeriodId } = Astro.params;
const { parliamentPeriod, sessionInputs } =
  Astro.props as ParliamentPeriodWithSessionsProps;

const groupedByMonthMap = Map.groupBy(sessionInputs, (sessionInput) => {
  const date = new Date(sessionInput.session.date);
  const month = `${date.getMonth() + 1}`.padStart(2, '0');
  const year = date.getFullYear();
  return `${year}-${month}`;
});
const groupedByMonth = Array.from(groupedByMonthMap)
  .map(([key, value]) => {
    const year = parseInt(key.split('-')[0], 10);
    const month = parseInt(key.split('-')[1], 10);
    const label = new Date(key + '-01').toLocaleString('de-DE', {
      month: 'long',
      year: 'numeric',
    });
    return {
      month,
      year,
      label,
      sessions: value.map((sessionInput) => ({
        sessionId: sessionInput.session.id,
        date: sessionInput.session.date,
        dateDisplay: formatDate(sessionInput.session.date),
        title: sessionInput.session.title,
        pending: !sessionInput.session.meetingMinutesUrl,
      })),
    };
  })
  .toSorted((a, b) =>
    a.year !== b.year ? b.year - a.year : b.month - a.month,
  );

const timelineEntries = groupedByMonth
  .map<TimelineEntry[]>((group) => {
    const monthEntry = {
      type: 'month',
      month: group.month,
      year: group.year,
      label: group.label,
    } as TimelineEntry;
    const sessionEntries = group.sessions
      .toSorted(
        (a, b) => new Date(a.date).getTime() - new Date(b.date).getTime(),
      )
      .map<TimelineEntry>((session) => {
        return {
          type: 'session',
          sessionId: session.sessionId,
          date: session.date,
          dateDisplay: formatDate(session.date),
          title: session.title,
          pending: session.pending,
        };
      });

    return [monthEntry, ...sessionEntries];
  })
  .flat();

const breadcrumbItems: BreadcrumbItem[] = [
  {
    name: parliamentPeriod.name,
    href: `/pp/${parliamentPeriodId}`,
  },
  {
    name: 'Sitzungen',
    href: null,
  },
];
---

<PageLayout
  pageTitle="Sitzungen"
  parliamentPeriod={parliamentPeriod}
  breadcrumbItems={breadcrumbItems}
>
  <ul class="timeline timeline-vertical">
    {
      timelineEntries.map((entry, index) => {
        const pending =
          entry.type === 'session' && (entry as SessionEntry).pending;
        return entry.type === 'month' ? (
          <li>
            {index !== 0 && <hr />}
            <div class="timeline-start">{(entry as MonthEntry).label}</div>
            <div class="timeline-middle">
              <div class="bg-base-200 grid place-items-center rounded-full border border-base-300 p-1">
                <span class="iconify lucide--calendar-1" />
              </div>
            </div>
            {index < timelineEntries.length - 1 && <hr />}
          </li>
        ) : (
          <li>
            {index !== 0 && <hr />}
            <div class="timeline-middle">
              <div class="bg-base-200 grid place-items-center rounded-full border border-base-300 p-1" />
            </div>
            <a
              href={`/pp/${parliamentPeriodId}/session/${(entry as SessionEntry).sessionId}`}
              class="timeline-end timeline-box ms-3 hover:bg-base-200 hover:cursor-pointer space-y-2"
              class:list={pending ? 'border-dashed' : undefined}
            >
              <div
                class:list={
                  pending ? 'text-base-content/40' : 'text-base-content/70'
                }
              >
                {(entry as SessionEntry).dateDisplay}
              </div>
              {(entry as SessionEntry).title && (
                <div
                  class="text-base"
                  class:list={pending ? 'text-base-content/50' : undefined}
                >
                  {(entry as SessionEntry).title}
                </div>
              )}
              {pending && (
                <div class="text-warning flex items-center gap-1">
                  <span class="iconify lucide--alert-triangle" />
                  Pr√ºfung noch nicht abgeschlossen
                </div>
              )}
            </a>
            {index < timelineEntries.length - 1 && <hr />}
          </li>
        );
      })
    }
  </ul>
</PageLayout>
