---
import { type SessionScan, type SessionScanItem } from '@models/session-scan';
import { type VotingListItem } from './_model';
import { getVotingId } from '@utils/session-utils';

type Props = {
  parliamentPeriodId: string;
  sessionId: string;
  sessionScan: SessionScan;
};

const { parliamentPeriodId, sessionId, sessionScan } = Astro.props as Props;

const votings = sessionScan
  .map(
    (voting) =>
      ({
        id: getVotingId(voting),
        agendaItem: voting.votingSubject.agendaItem,
        applicationId: voting.votingSubject.applicationId,
        title: voting.votingSubject.title,
        type: voting.votingSubject.type || '',
        authors: voting.votingSubject.authors,
        accepted: votingAccepted(voting),
      }) satisfies VotingListItem,
  )
  .toSorted((a, b) => a.id - b.id);

function votingAccepted(voting: SessionScanItem) {
  const votedFor = voting.votes.filter((vote) => vote.vote === 'J').length;
  const votedAgainst = voting.votes.filter((vote) => vote.vote === 'N').length;
  return votedFor > votedAgainst;
}
---

<ul class="timeline timeline-vertical timeline-compact">
  {
    votings.map((voting, index) => (
      <li>
        {index > 0 && <hr />}
        <div class="timeline-middle">
          <div class="bg-base-200 grid place-items-center rounded-full border border-base-300 p-1">
            {voting.accepted ? (
              <span
                aria-label="angenommen"
                class="iconify lucide--check text-success"
              />
            ) : (
              <span
                aria-label="abgelehnt"
                class="iconify lucide--x text-error"
              />
            )}
          </div>
        </div>
        <a
          href={`/pp/${parliamentPeriodId}/session/${sessionId}/voting/${voting.id}`}
          class="timeline-end timeline-box mt-5 ms-3 w-full hover:bg-base-200 hover:cursor-pointer space-y-2"
        >
          <div class="text-base-content/70">
            {voting.agendaItem} {voting.type} {voting.applicationId}
          </div>
          <div>{voting.title}</div>
          {voting.authors.length > 0 && (
            <div class="flex flex-wrap gap-1">
              {voting.authors.map((author) => (
                <span class="badge badge-neutral badge-sm">
                  {author}
                </span>
              ))}
            </div>
          )}
        </a>
        {index < votings.length - 1 && <hr />}
      </li>
    ))
  }
</ul>
