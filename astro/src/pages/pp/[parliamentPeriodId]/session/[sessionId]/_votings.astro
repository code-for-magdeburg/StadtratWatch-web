---
import { type SessionScan, type SessionScanItem } from '@models/session-scan';
import { type VotesByFaction, type VotingListItem } from './_model';
import { getVotingId } from '@utils/session-utils';
import { type SessionScanVote } from '@models/session-scan';
import { type Registry } from '@models/registry';

type Props = {
  parliamentPeriod: Registry;
  sessionId: string;
  sessionScan: SessionScan;
};

const { parliamentPeriod, sessionId, sessionScan } = Astro.props as Props;

const votings = sessionScan
  .map(
    (voting) =>
      ({
        id: getVotingId(voting),
        agendaItem: voting.votingSubject.agendaItem,
        applicationId: voting.votingSubject.applicationId,
        title: voting.votingSubject.title,
        type: voting.votingSubject.type || '',
        authors: voting.votingSubject.authors,
        votesByFactions: getVotesByFactions(voting.votes),
        accepted: votingAccepted(voting),
      }) satisfies VotingListItem,
  )
  .toSorted((a, b) => a.id - b.id);

function getVotesByFactions(votes: SessionScanVote[]): VotesByFaction[] {

  const votesWithFactionId = votes.map(vote => {
    const person = parliamentPeriod.persons.find(p => p.name === vote.name);
    if (!person) {
      throw new Error(`Person ${vote.name} not found`);
    }
    return {
      personName: person.name,
      factionId: person.factionId,
      vote: vote.vote,
    };
  });

  return parliamentPeriod.factions
    .toSorted((a, b) => b.seats - a.seats)
    .map((faction, orderIndex) => {
      const votes = votesWithFactionId
        .filter(v => v.factionId === faction.id)
        .map(vote => ({
          ...vote,
          orderIndex: vote.vote === 'J'
            ? 1
            : vote.vote === 'N'
              ? 2
              : vote.vote === 'E'
                ? 3
                : 4
        }))
        .toSorted((a, b) => a.orderIndex - b.orderIndex)
        .map(vote => ({
          personName: vote.personName,
          vote: vote.vote,
        }));
      return {
        factionId: faction.id,
        factionName: faction.name,
        orderIndex,
        votes
      };
    });

}

function votingAccepted(voting: SessionScanItem) {
  const votedFor = voting.votes.filter((vote) => vote.vote === 'J').length;
  const votedAgainst = voting.votes.filter((vote) => vote.vote === 'N').length;
  return votedFor > votedAgainst;
}
---

{
  votings.length === 0 ? (
    <div class="alert alert-info alert-soft">
      <span class="iconify lucide--info size-5" />
      Es liegen noch keine Abstimmungsdaten vor.
    </div>
  ) : (
    <ul class="timeline timeline-vertical timeline-compact">
      {votings.map((voting, index) => (
        <li>
          {index > 0 && <hr />}
          <div class="timeline-middle">
            <div class="bg-base-200 grid place-items-center rounded-full border border-base-300 p-1">
              {voting.accepted ? (
                <span
                  aria-label="angenommen"
                  class="iconify lucide--check text-success"
                />
              ) : (
                <span
                  aria-label="abgelehnt"
                  class="iconify lucide--x text-error"
                />
              )}
            </div>
          </div>
          <a
            href={`/pp/${parliamentPeriod.id}/session/${sessionId}/voting/${voting.id}`}
            class="timeline-end timeline-box mt-5 ms-3 w-full hover:bg-base-200 hover:cursor-pointer space-y-2"
          >
            <div class="text-base-content/70 space-x-1">
              <span>{voting.agendaItem}</span>
              <span>{voting.type}</span>
              <span>{voting.applicationId}</span>
            </div>
            <div class="text-base">{voting.title}</div>
            {voting.authors.length > 0 && (
              <div class="flex flex-wrap gap-1">
                {voting.authors.map((author) => (
                  <span class="badge badge-neutral badge-sm">{author}</span>
                ))}
              </div>
            )}

            <div class="grid grid-cols-[auto_1fr] gap-x-2">
              {
                voting.votesByFactions.map((votesByFaction) => (
                  <>
                    <div class="text-base-content/70">
                      {votesByFaction.factionName}:
                    </div>
                    <div class="space-x-1">
                      {
                        votesByFaction.votes.map((vote) => (
                          <div class="tooltip" data-tip={vote.personName}>
                            <div
                              class="status status-lg"
                              class:list={[
                                { 'status-success': vote.vote === 'J' },
                                { 'status-error': vote.vote === 'N' },
                                { 'status-warning': vote.vote === 'E' },
                              ]}
                            ></div>
                          </div>
                        ))
                      }
                    </div>
                  </>
                ))
              }
            </div>
          </a>
          {index < votings.length - 1 && <hr />}
        </li>
      ))}
    </ul>
  )
}
