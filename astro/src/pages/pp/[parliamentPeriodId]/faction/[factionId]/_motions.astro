---
import { type SessionInput } from '@models/SessionInput';
import { type RegistryFaction } from '@models/registry';
import { getMotionResult, getVotingId, getVotingResult } from './_helpers';
import { formatDate } from '@utils/format-date';
import type {
  OparlAgendaItem,
  OparlMeeting,
  OparlConsultation,
} from '@models/oparl.ts';
import { getPaperId } from '../../_helpers2';

export type MotionListItem = {
  sessionId: string;
  votingId: number;
  votingDate: string;
  votingDateFormatted: string;
  type: string | null;
  motionId: string;
  paperId: number | null;
  title: string;
  result: string;
};

type Props = {
  parliamentPeriodId: string;
  faction: RegistryFaction;
  sessionInputs: SessionInput[];
  oparlMeetings: OparlMeeting[];
  oparlAgendaItems: OparlAgendaItem[];
  oparlConsultations: OparlConsultation[];
};

const {
  parliamentPeriodId,
  faction,
  sessionInputs,
  oparlMeetings,
  oparlAgendaItems,
  oparlConsultations,
} = Astro.props as Props;

const factionMotionVotings = sessionInputs
  .flatMap((sessionInput) =>
    sessionInput.votings.map((voting) => ({
      voting,
      sessionId: sessionInput.session.id,
      sessionDate: sessionInput.session.date,
    })),
  )
  .filter((voting) => !!voting.voting.votingSubject.motionId)
  .filter((voting) =>
    voting.voting.votingSubject.authors.includes(faction.name),
  );
const motionsMap = Map.groupBy(
  factionMotionVotings,
  (voting) =>
    `${voting.voting.votingSubject.motionId}-${voting.voting.votingSubject.type}`,
);
const motions = Array.from(motionsMap)
  .map(([_, motionVotings]) => {
    const motionVoting = motionVotings[0];
    const motionId = motionVoting.voting.votingSubject.motionId;
    const motionType = motionVoting.voting.votingSubject.type;
    const motionTitle = motionVoting.voting.votingSubject.title;
    const sessionId = motionVoting.sessionId;
    const sessionDate = motionVoting.sessionDate;
    const paperId = getPaperId(
      motionVoting.sessionDate,
      motionVoting.voting,
      oparlMeetings,
      oparlAgendaItems,
      oparlConsultations,
    );
    const votings = motionVotings.map((motionVoting) => ({
      votingId: +motionVoting.voting.votingFilename.substring(11, 14),
      votingResult: getVotingResult(motionVoting.voting.votes),
    }));
    return {
      motionId,
      type: motionType,
      title: motionTitle,
      sessionId,
      sessionDate,
      paperId,
      votings,
    };
  })
  .toSorted((a, b) => b.sessionDate.localeCompare(a.sessionDate))
  .map<MotionListItem>(
    (motion) =>
      ({
        sessionId: motion.sessionId,
        votingId: getVotingId(motion.votings),
        votingDate: motion.sessionDate,
        votingDateFormatted: formatDate(motion.sessionDate),
        type: motion.type,
        motionId: motion.motionId,
        paperId: motion.paperId,
        title: motion.title,
        result: getMotionResult(motion.votings),
      }) satisfies MotionListItem,
  );
---

<div
  class="overflow-x-auto space-y-4"
  x-data="motions"
  data-motions={JSON.stringify(motions)}
  data-parliament-period-id={parliamentPeriodId}
>
  <div class="flex flex-row flex-wrap gap-4">
    <div class="flex items-center gap-2">
      <input
        class="toggle toggle-sm"
        id="motionsFilterCheckbox"
        x-ref="motionsFilterCheckbox"
        type="checkbox"
        checked
        @change="filterList($event.target.checked, $refs.changeRequestsFilterCheckbox.checked, $refs.pointsOfOrderFilterCheckbox.checked)"
      />
      <label class="label text-sm" for="motionsFilterCheckbox"> Anträge </label>
    </div>
    <div class="flex items-center gap-2">
      <input
        class="toggle toggle-sm"
        id="changeRequestsFilterCheckbox"
        x-ref="changeRequestsFilterCheckbox"
        type="checkbox"
        checked
        @change="filterList($refs.motionsFilterCheckbox.checked, $event.target.checked, $refs.pointsOfOrderFilterCheckbox.checked)"
      />
      <label class="label text-sm" for="changeRequestsFilterCheckbox">
        Änderungsanträge
      </label>
    </div>
    <div class="flex items-center gap-2">
      <input
        class="toggle toggle-sm"
        id="pointsOfOrderFilterCheckbox"
        x-ref="pointsOfOrderFilterCheckbox"
        type="checkbox"
        checked
        @change="filterList($refs.motionsFilterCheckbox.checked, $refs.changeRequestsFilterCheckbox.checked, $event.target.checked)"
      />
      <label class="label text-sm" for="pointsOfOrderFilterCheckbox">
        Geschäftsordnungsanträge
      </label>
    </div>
  </div>
  <table class="table">
    <thead>
      <tr>
        <th scope="col" class="px-0">
          <button
            class="btn btn-ghost btn-block flex justify-between"
            @click="sortTextColumn('votingDate', (motion) => motion.votingDate)"
          >
            <span class="text-left">Abgestimmt am</span>
            <span class="iconify lucide--chevrons-up-down"></span>
          </button>
        </th>
        <th scope="col" class="px-0">
          <button
            class="btn btn-ghost btn-block flex justify-between"
            @click="sortTextColumn('motionId', motion => motion.motionId)"
          >
            <span class="text-left">Antrag</span>
            <span class="iconify lucide--chevrons-up-down"></span>
          </button>
        </th>
        <th scope="col" class="px-0">
          <button
            class="btn btn-ghost btn-block flex justify-between"
            @click="sortTextColumn('title', motion => motion.title)"
          >
            <span class="text-left">Titel</span>
            <span class="iconify lucide--chevrons-up-down"></span>
          </button>
        </th>
        <th scope="col" class="text-center">
          <button
            class="btn btn-ghost btn-block flex justify-between"
            @click="sortTextColumn('result', motion => motion.result)"
          >
            <span class="text-left">Ergebnis</span>
            <span class="iconify lucide--chevrons-up-down"></span>
          </button>
        </th>
      </tr>
    </thead>
    <tbody>
      <template x-for="motion in motions">
        <tr>
          <td x-text="motion.votingDateFormatted"></td>
          <td class="flex flex-col">
            <span x-text="motion.type"></span>
            <template x-if="motion.paperId">
              <a
                :href="`/paper?paperId=${motion.paperId}`"
                class="link link-primary"
                x-text="motion.motionId"></a>
            </template>
            <template x-if="!motion.paperId">
              <span x-text="motion.motionId"></span>
            </template>
          </td>
          <td>
            <a
              :href="`/pp/${parliamentPeriodId}/session/${motion.sessionId}/voting/${motion.votingId}`"
              class="link link-primary"
              x-text="motion.title"></a>
          </td>
          <td class="text-center">
            <template x-if="motion.result === 'ACCEPTED'">
              <div class="badge badge-success badge-soft badge-sm">
                <span class="iconify lucide--check-check"></span>
                <span>Angenommen</span>
              </div>
            </template>
            <template x-if="motion.result === 'PARTIALLY_ACCEPTED'">
              <div class="badge badge-warning badge-soft badge-sm">
                <span class="iconify lucide--check"></span>
                <span>Teilweise</span>
              </div>
            </template>
            <template x-if="motion.result === 'REJECTED'">
              <div class="badge badge-error badge-soft badge-sm">
                <span class="iconify lucide--x"></span>
                <span>Abgelehnt</span>
              </div>
            </template>
          </td>
        </tr>
      </template>
    </tbody>
  </table>
</div>

<script>
  import Alpine from 'alpinejs';
  import { type MotionListItem } from './_motions.astro';

  document.addEventListener('alpine:init', () => {
    const motionsTableElement = document.querySelector(
      '[data-motions]',
    ) as HTMLTableElement;
    const motions = JSON.parse(
      motionsTableElement.dataset.motions || '[]',
    ) as MotionListItem[];
    const parliamentPeriodId = motionsTableElement.dataset.parliamentPeriodId;

    Alpine.data('motions', () => ({
      parliamentPeriodId,
      motions,
      filterList: function (
        withMotions: boolean,
        withChangeRequests: boolean,
        withPointsOfOrder: boolean,
      ) {
        this.motions = motions.filter((motion) => {
          if (motion.type === 'Antrag' && !withMotions) return false;
          if (motion.type === 'Änderungsantrag' && !withChangeRequests)
            return false;
          if (motion.type === 'Geschäftsordnung' && !withPointsOfOrder)
            return false;
          return true;
        });
      },
      sortTextColumn: function (
        column: string,
        getText: (motion: MotionListItem) => string,
      ) {
        this._updateSortColumn(column);
        this.motions.sort((a, b) =>
          this._sortedDesc
            ? getText(b).localeCompare(getText(a))
            : getText(a).localeCompare(getText(b)),
        );
      },
      _sortedColumn: 'votingDate',
      _sortedDesc: true,
      _updateSortColumn: function (column: string) {
        if (this._sortedColumn === column) {
          this._sortedDesc = !this._sortedDesc;
        } else {
          this._sortedColumn = column;
          this._sortedDesc = false;
        }
      },
    }));
  });
</script>
